{"version":3,"file":"soImgPreload.js","sources":["../src/imgPreload.js"],"sourcesContent":["/**\r\n * 图片预加载\r\n * @param {Array} list - 图片url 集合\r\n * @param {Object} opt - 配置项\r\n * @param {Function} opt.each - 每加载完成一张图片回调函数\r\n * @param {Function} opt.all - 所有图片加载完成回调函数\r\n * @param {Undefined|Number} opt.limit - 同时加载的图片限制\r\n */\r\nexport default function lcImgPreload(list = [], opt = {}) {\r\n  const totalLen = list.length\r\n  let allData = []\r\n  let loadedLength = 0\r\n  let successNum = 0\r\n  let failNum = 0\r\n  let now = null\r\n\r\n  /**\r\n   * 加载完成回调\r\n   * @param {String} status [success|fail] - 加载状态\r\n   * @param {String} url - 当前图片的url\r\n   * @param {Number} index - 当前图片下标\r\n   * @param {Number} time - 当前图片的加载占时，单位ms\r\n   */\r\n  function imgLoadEnd(status, url, index, time) {\r\n    loadedLength++\r\n    status === 'success' ? successNum++ : failNum++\r\n    let totalTime = Date.now() - now\r\n    let obj = {\r\n      status: status,\r\n      index: index,\r\n      url: url,\r\n      time: time,\r\n    }\r\n    let speed = {\r\n      success: successNum,\r\n      fail: failNum,\r\n      total: totalLen,\r\n      totalTime: totalTime\r\n    }\r\n    opt.each && opt.each(obj, speed)\r\n    allData[index] = obj\r\n    if (opt.all && loadedLength === totalLen) {\r\n      opt.all(allData, speed)\r\n    }\r\n  }\r\n\r\n  function imgLoad(url, index, cb) {\r\n    let img = new Image()\r\n    let s_img_now = Date.now()\r\n    img.src = url\r\n    img.onload = function () {\r\n      imgLoadEnd('success', url, index, Date.now() - s_img_now)\r\n      cb && cb()\r\n    }\r\n    img.onerror = function () {\r\n      imgLoadEnd('fail', url, index, Date.now() - s_img_now)\r\n      cb && cb()\r\n    }\r\n  }\r\n\r\n  let nextLoadIndex = opt.limit\r\n\r\n  let taskList = []\r\n\r\n  function loadNext() {\r\n    if (nextLoadIndex > totalLen - 1) {\r\n      return\r\n    }\r\n    taskList[nextLoadIndex]()\r\n    nextLoadIndex += 1\r\n  }\r\n\r\n  if (typeof opt.limit === 'number' && opt.limit > 0) {\r\n\r\n    let createTask = (url, index) => {\r\n      return () => {\r\n        imgLoad(url, index, loadNext)\r\n      }\r\n    }\r\n\r\n\r\n    list.forEach((p1, p2) => {\r\n      taskList.push(createTask(p1, p2))\r\n    })\r\n    now = Date.now()\r\n    for (let i = 0; i < opt.limit; i++) {\r\n      taskList[i]()\r\n    }\r\n  } else {\r\n    now = Date.now()\r\n    list.forEach((p1, p2) => {\r\n      imgLoad(p1, p2)\r\n    })\r\n  }\r\n}\r\n"],"names":["list","opt","totalLen","length","allData","loadedLength","successNum","failNum","now","imgLoadEnd","status","url","index","time","totalTime","Date","obj","speed","success","fail","total","each","all","imgLoad","cb","img","Image","s_img_now","src","onload","onerror","nextLoadIndex","limit","taskList","loadNext","forEach","p1","p2","push","i"],"mappings":"mPAQe,eAAsBA,yDAAO,GAAIC,yDAAM,GAC9CC,EAAWF,EAAKG,OAClBC,EAAU,GACVC,EAAe,EACfC,EAAa,EACbC,EAAU,EACVC,EAAM,cASDC,EAAWC,EAAQC,EAAKC,EAAOC,GACtCR,IACW,YAAXK,EAAuBJ,IAAeC,QAClCO,EAAYC,KAAKP,MAAQA,EACzBQ,EAAM,CACRN,OAAQA,EACRE,MAAOA,EACPD,IAAKA,EACLE,KAAMA,GAEJI,EAAQ,CACVC,QAASZ,EACTa,KAAMZ,EACNa,MAAOlB,EACPY,UAAWA,GAEbb,EAAIoB,MAAQpB,EAAIoB,KAAKL,EAAKC,GAC1Bb,EAAQQ,GAASI,EACbf,EAAIqB,KAAOjB,IAAiBH,GAC9BD,EAAIqB,IAAIlB,EAASa,YAIZM,EAAQZ,EAAKC,EAAOY,OACvBC,EAAM,IAAIC,MACVC,EAAYZ,KAAKP,MACrBiB,EAAIG,IAAMjB,EACVc,EAAII,OAAS,WACXpB,EAAW,UAAWE,EAAKC,EAAOG,KAAKP,MAAQmB,GAC/CH,GAAMA,KAERC,EAAIK,QAAU,WACZrB,EAAW,OAAQE,EAAKC,EAAOG,KAAKP,MAAQmB,GAC5CH,GAAMA,SAINO,EAAgB9B,EAAI+B,MAEpBC,EAAW,YAENC,IACahC,EAAW,EAA3B6B,IAGJE,EAASF,KACTA,GAAiB,MAGM,iBAAd9B,EAAI+B,OAAkC,EAAZ/B,EAAI+B,MAAW,CASlDhC,EAAKmC,QAAQ,SAACC,EAAIC,GAPD,IAAC1B,EAAKC,EAQrBqB,EAASK,MARO3B,EAQSyB,EARJxB,EAQQyB,EAPtB,WACLd,EAAQZ,EAAKC,EAAOsB,QAQxB1B,EAAMO,KAAKP,UACN,IAAI+B,EAAI,EAAGA,EAAItC,EAAI+B,MAAOO,IAC7BN,EAASM,UAGX/B,EAAMO,KAAKP,MACXR,EAAKmC,QAAQ,SAACC,EAAIC,GAChBd,EAAQa,EAAIC"}